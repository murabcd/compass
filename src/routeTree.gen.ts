/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as JobsIndexRouteImport } from './routes/jobs/index'
import { Route as InterviewsIndexRouteImport } from './routes/interviews/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as CandidatesIndexRouteImport } from './routes/candidates/index'
import { Route as JobsJobIdRouteImport } from './routes/jobs/$jobId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const JobsIndexRoute = JobsIndexRouteImport.update({
  id: '/jobs/',
  path: '/jobs/',
  getParentRoute: () => rootRouteImport,
} as any)
const InterviewsIndexRoute = InterviewsIndexRouteImport.update({
  id: '/interviews/',
  path: '/interviews/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const CandidatesIndexRoute = CandidatesIndexRouteImport.update({
  id: '/candidates/',
  path: '/candidates/',
  getParentRoute: () => rootRouteImport,
} as any)
const JobsJobIdRoute = JobsJobIdRouteImport.update({
  id: '/jobs/$jobId',
  path: '/jobs/$jobId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/jobs/$jobId': typeof JobsJobIdRoute
  '/candidates': typeof CandidatesIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/interviews': typeof InterviewsIndexRoute
  '/jobs': typeof JobsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/jobs/$jobId': typeof JobsJobIdRoute
  '/candidates': typeof CandidatesIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/interviews': typeof InterviewsIndexRoute
  '/jobs': typeof JobsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/jobs/$jobId': typeof JobsJobIdRoute
  '/candidates/': typeof CandidatesIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/interviews/': typeof InterviewsIndexRoute
  '/jobs/': typeof JobsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/jobs/$jobId'
    | '/candidates'
    | '/dashboard'
    | '/interviews'
    | '/jobs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/jobs/$jobId'
    | '/candidates'
    | '/dashboard'
    | '/interviews'
    | '/jobs'
  id:
    | '__root__'
    | '/'
    | '/jobs/$jobId'
    | '/candidates/'
    | '/dashboard/'
    | '/interviews/'
    | '/jobs/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  JobsJobIdRoute: typeof JobsJobIdRoute
  CandidatesIndexRoute: typeof CandidatesIndexRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  InterviewsIndexRoute: typeof InterviewsIndexRoute
  JobsIndexRoute: typeof JobsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/jobs/': {
      id: '/jobs/'
      path: '/jobs'
      fullPath: '/jobs'
      preLoaderRoute: typeof JobsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/interviews/': {
      id: '/interviews/'
      path: '/interviews'
      fullPath: '/interviews'
      preLoaderRoute: typeof InterviewsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/candidates/': {
      id: '/candidates/'
      path: '/candidates'
      fullPath: '/candidates'
      preLoaderRoute: typeof CandidatesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/jobs/$jobId': {
      id: '/jobs/$jobId'
      path: '/jobs/$jobId'
      fullPath: '/jobs/$jobId'
      preLoaderRoute: typeof JobsJobIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  JobsJobIdRoute: JobsJobIdRoute,
  CandidatesIndexRoute: CandidatesIndexRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  InterviewsIndexRoute: InterviewsIndexRoute,
  JobsIndexRoute: JobsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
