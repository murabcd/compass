/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TalentsIndexRouteImport } from './routes/talents/index'
import { Route as JobsIndexRouteImport } from './routes/jobs/index'
import { Route as AssistantsIndexRouteImport } from './routes/assistants/index'
import { Route as TalentsTalentIdRouteImport } from './routes/talents/$talentId'
import { Route as JobsJobIdRouteImport } from './routes/jobs/$jobId'
import { Route as AssistantsAssistantIdRouteImport } from './routes/assistants/$assistantId'
import { ServerRoute as ApiSessionServerRouteImport } from './routes/api/session'

const rootServerRouteImport = createServerRootRoute()

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TalentsIndexRoute = TalentsIndexRouteImport.update({
  id: '/talents/',
  path: '/talents/',
  getParentRoute: () => rootRouteImport,
} as any)
const JobsIndexRoute = JobsIndexRouteImport.update({
  id: '/jobs/',
  path: '/jobs/',
  getParentRoute: () => rootRouteImport,
} as any)
const AssistantsIndexRoute = AssistantsIndexRouteImport.update({
  id: '/assistants/',
  path: '/assistants/',
  getParentRoute: () => rootRouteImport,
} as any)
const TalentsTalentIdRoute = TalentsTalentIdRouteImport.update({
  id: '/talents/$talentId',
  path: '/talents/$talentId',
  getParentRoute: () => rootRouteImport,
} as any)
const JobsJobIdRoute = JobsJobIdRouteImport.update({
  id: '/jobs/$jobId',
  path: '/jobs/$jobId',
  getParentRoute: () => rootRouteImport,
} as any)
const AssistantsAssistantIdRoute = AssistantsAssistantIdRouteImport.update({
  id: '/assistants/$assistantId',
  path: '/assistants/$assistantId',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiSessionServerRoute = ApiSessionServerRouteImport.update({
  id: '/api/session',
  path: '/api/session',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/assistants/$assistantId': typeof AssistantsAssistantIdRoute
  '/jobs/$jobId': typeof JobsJobIdRoute
  '/talents/$talentId': typeof TalentsTalentIdRoute
  '/assistants': typeof AssistantsIndexRoute
  '/jobs': typeof JobsIndexRoute
  '/talents': typeof TalentsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/assistants/$assistantId': typeof AssistantsAssistantIdRoute
  '/jobs/$jobId': typeof JobsJobIdRoute
  '/talents/$talentId': typeof TalentsTalentIdRoute
  '/assistants': typeof AssistantsIndexRoute
  '/jobs': typeof JobsIndexRoute
  '/talents': typeof TalentsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/assistants/$assistantId': typeof AssistantsAssistantIdRoute
  '/jobs/$jobId': typeof JobsJobIdRoute
  '/talents/$talentId': typeof TalentsTalentIdRoute
  '/assistants/': typeof AssistantsIndexRoute
  '/jobs/': typeof JobsIndexRoute
  '/talents/': typeof TalentsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/assistants/$assistantId'
    | '/jobs/$jobId'
    | '/talents/$talentId'
    | '/assistants'
    | '/jobs'
    | '/talents'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/assistants/$assistantId'
    | '/jobs/$jobId'
    | '/talents/$talentId'
    | '/assistants'
    | '/jobs'
    | '/talents'
  id:
    | '__root__'
    | '/'
    | '/assistants/$assistantId'
    | '/jobs/$jobId'
    | '/talents/$talentId'
    | '/assistants/'
    | '/jobs/'
    | '/talents/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AssistantsAssistantIdRoute: typeof AssistantsAssistantIdRoute
  JobsJobIdRoute: typeof JobsJobIdRoute
  TalentsTalentIdRoute: typeof TalentsTalentIdRoute
  AssistantsIndexRoute: typeof AssistantsIndexRoute
  JobsIndexRoute: typeof JobsIndexRoute
  TalentsIndexRoute: typeof TalentsIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/session': typeof ApiSessionServerRoute
}
export interface FileServerRoutesByTo {
  '/api/session': typeof ApiSessionServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/session': typeof ApiSessionServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/session'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/session'
  id: '__root__' | '/api/session'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiSessionServerRoute: typeof ApiSessionServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/talents/': {
      id: '/talents/'
      path: '/talents'
      fullPath: '/talents'
      preLoaderRoute: typeof TalentsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/jobs/': {
      id: '/jobs/'
      path: '/jobs'
      fullPath: '/jobs'
      preLoaderRoute: typeof JobsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/assistants/': {
      id: '/assistants/'
      path: '/assistants'
      fullPath: '/assistants'
      preLoaderRoute: typeof AssistantsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/talents/$talentId': {
      id: '/talents/$talentId'
      path: '/talents/$talentId'
      fullPath: '/talents/$talentId'
      preLoaderRoute: typeof TalentsTalentIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/jobs/$jobId': {
      id: '/jobs/$jobId'
      path: '/jobs/$jobId'
      fullPath: '/jobs/$jobId'
      preLoaderRoute: typeof JobsJobIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/assistants/$assistantId': {
      id: '/assistants/$assistantId'
      path: '/assistants/$assistantId'
      fullPath: '/assistants/$assistantId'
      preLoaderRoute: typeof AssistantsAssistantIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/session': {
      id: '/api/session'
      path: '/api/session'
      fullPath: '/api/session'
      preLoaderRoute: typeof ApiSessionServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AssistantsAssistantIdRoute: AssistantsAssistantIdRoute,
  JobsJobIdRoute: JobsJobIdRoute,
  TalentsTalentIdRoute: TalentsTalentIdRoute,
  AssistantsIndexRoute: AssistantsIndexRoute,
  JobsIndexRoute: JobsIndexRoute,
  TalentsIndexRoute: TalentsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiSessionServerRoute: ApiSessionServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
